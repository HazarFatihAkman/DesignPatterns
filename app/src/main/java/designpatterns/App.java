/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package designpatterns;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Random;
import java.util.UUID;
import java.util.stream.Collectors;

import designpatterns.abstractfactory.factories.FurnitureFactory;
import designpatterns.abstractfactory.models.products.ProductStyleTypes;
import designpatterns.abstractfactory.models.products.ProductTypes;
import designpatterns.factorymethod.factories.LogisticFactory;

public class App {
    public static void main(String[] args) {
        try {
            var furnitureFactory = new FurnitureFactory();

            buildFurnituresFor(furnitureFactory, ProductStyleTypes.ArtDeco, 1);
            buildFurnituresFor(furnitureFactory, ProductStyleTypes.Modern, 3);
            buildFurnituresFor(furnitureFactory, ProductStyleTypes.Victorian, 8);
        }
        catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
    }

    public static void buildFurnituresFor(FurnitureFactory furnitureFactory, ProductStyleTypes productStyle, int maxProductCount) {
        var factory = furnitureFactory.getInstance(productStyle);

        for(int i = 0; i <= maxProductCount; i++) {
            var order = factory.creatOrder();
            order.addProduct(factory.createProduct(ProductTypes.Chair));
            order.addProduct(factory.createProduct(ProductTypes.Sofa));
            order.addProduct(factory.createProduct(ProductTypes.Table));
    
            if (i % 2 == 0) {
                order.updateCreatedAt(LocalDateTime.now().minusDays(12));
            }

            factory.addOrder(order);
        }

        var orders = factory.getOrders();
        var mappedOrders = orders.stream().collect(Collectors.toMap(x -> x.getId(), x -> x.totalWeight(), (id, weight) -> weight, HashMap::new));
        var random = new Random();

        if (mappedOrders.entrySet().stream().mapToInt(x -> x.getValue()).sum() > 50) {
            buildLogisticsFor(random.nextInt(20_000) - 1_500, random.nextInt(100_000) - 1050, mappedOrders);
        }
        else {
            buildLogisticsFor(random.nextInt(1_500) - 1, random.nextInt(1050) - 1, mappedOrders);
        }

        for (var item : orders) {
            System.out.println(item.toString());
        }
    }

    public static void buildLogisticsFor(int distance, int load, HashMap<UUID, Integer> orders) {
        var logistic = LogisticFactory.createLogistic(distance, load);
        println("===========================================================================");
        println("Logistics for %d km distance and %d ton load: %s", distance, load, logistic.getClass().getSimpleName());

        var random = new Random(System.currentTimeMillis());
        
        var range = random.nextInt(distance, logistic.getMaxRange());
        var loadCapacity = random.nextInt(load, logistic.getMaxLoadCapacity());
        logistic.addVehicle(range, loadCapacity, orders);

        println("Vehicles:");
        logistic.getAllVehicles().forEach(v -> println("\tVehicle: %s", v));
    }

    public static void println(String message, Object... args) {
        System.out.printf(message + "%n", args);
    }
}
